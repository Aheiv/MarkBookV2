@page "/admin/subjects"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navigation
@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.AdminLayout
@rendermode InteractiveServer

<div>
	<div class="container h-50 py-10">
		@if (!loading)
		{
			<table class="table table-striped">
				<thead>
					<tr>
						<th scope="col">#</th>
						<th scope="col">Название предмета</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Data.Database.Model.Subject subject in subjects)
					{
						var sID = subject.Id;
						<tr>
							<th scope="row">@subject.Id</th>
							<td>@subject.Name</td>
							<td>
								<button class="btn btn-danger" @onclick="@(() => {DeleteSubject(sID);})">Удалить</button>
								<button type="button" class="btn btn-success" @onclick="@(() => {RedirectToAS(sID);})">Изменить</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
		<button type="button" class="btn btn-primary" @onclick="@(() => {RedirectToAS(0);})">Добавить предмет</button>
	</div>
</div>

@code {
	private int RedirectToAS(int n)
	{
		if (n == 0) navigation.NavigateTo("/admin/subjects/addsubjects/0");
		else
		{
			navigation.NavigateTo($"/admin/subjects/addsubjects/{n}");
		}
		return n;
	}
	private bool loading = true;

	private List<Data.Database.Model.Subject> subjects;

	private async Task LoadSubjects()
	{
		using (var db = DbFactory.CreateDbContext())
		{
			loading = true;
			subjects = await db.Subjects.ToListAsync();
		}
		loading = false;
	}

	private async Task DeleteSubject(int id)
	{
		using (var db = DbFactory.CreateDbContext())
		{
			try
			{
				var subjectToRemove = await db.Subjects
					.FirstAsync(subject => subject.Id == id);

				db.Subjects.Remove(subjectToRemove);
				db.SaveChanges();
				StateHasChanged();
				await db.SaveChangesAsync();
				navigation.Refresh(forceReload: true);

			}
			catch
			{
				Exception e = new Exception("ошибка");
			}

		}
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadSubjects();
	}
}
