@page "/admin/grades/addgrades/{n}"
@using Microsoft.EntityFrameworkCore

@inject NavigationManager navigation
@inject IDbContextFactory<Data.Database.Context> DbFactory
@layout Components.Layout.MainLayout
@rendermode InteractiveServer

@if (dialog == true)
{
	<dialog open>
		<p>Сохранить изменения?</p>
		<button class="btn btn-secondary" @onclick="Cancel">Отмена</button>
		<button class="btn btn-success" @onclick="AddGrade">Сохранить</button>
	</dialog>
}
<div class="container h-50 py-10">
	<div>
		<div class="d-inline-block">
			<p>Класс</p>
		</div>
		<div class="d-inline-block">
			<input @bind-value="Name" class="rounded">
		</div>
	</div>
	<div>
		<div class="d-inline-block">
			<p>Литера</p>
		</div>
		<div class="d-inline-block">
			<input @bind-value="Letter" class="rounded">
		</div>
	</div>
	<div>
		@if (n != "0")
		{
			<button type="button" class="btn btn-outline-info" @onclick="OpenDialog">Изменить класс</button>
		}
		else
		{
			<button type="button" class="btn btn-outline-info" @onclick="AddGrade">Добавить класс</button>
		}
	</div>
</div>
@code {
	[Parameter]
	public string n { get; set; }

	public bool dialog = false;

	private int Name { get; set; }

	private string Letter { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await OnLoad();
	}
	private async Task OnLoad()
	{
		if (n != "0")
		{
			using (var db = DbFactory.CreateDbContext())
			{
				var gradeToEdit = await db.Grades
					.FirstAsync(grade => grade.Id == int.Parse(n));
				Name = gradeToEdit.Name;
				Letter = gradeToEdit.Subname;
			}
		}
	}
	private async Task OpenDialog()
	{
		dialog = true;
	}
	private async Task Cancel()
	{
		dialog = false;
	}
	private async Task AddGrade()
	{
		if (n == "0")
		{
			using (var db = DbFactory.CreateDbContext())
			{
				Data.Database.Model.Grade g = new Data.Database.Model.Grade();
					g.Name = Name;
					g.Subname = Letter;
				db.Grades.Add(g);
				await db.SaveChangesAsync();
			}

		}
		else
		{
			using (var db = DbFactory.CreateDbContext())
			{
					var gradeToEdit = await db.Grades
						.FirstAsync(grade => grade.Id == int.Parse(n));
					gradeToEdit.Name = Name;
					gradeToEdit.Subname = Letter;
					db.Grades.Update(gradeToEdit);
				await db.SaveChangesAsync();
			}
		}
		navigation.NavigateTo("/admin/grades");
	}
}
